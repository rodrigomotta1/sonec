"""Keyset pagination utilities.

This module implements helpers to encode and decode keyset tokens for stable
pagination based on a composite key (``created_at``, ``id``).
"""

from __future__ import annotations

import base64
from dataclasses import dataclass
from datetime import datetime
from typing import Tuple

from .time import to_rfc3339_z, parse_utc


@dataclass(slots=True)
class Keyset:
    """Represents a keyset cursor with ``created_at`` and ``id`` components.

    Attributes
    ----------
    created_at:
        UTC timestamp of the last row included in the previous page.
    id:
        Primary key of the last row included in the previous page.
    """

    created_at: datetime
    id: int


def encode_after_key(created_at: datetime, id: int) -> str:
    """Encode a keyset token from ``created_at`` and ``id``.

    The token is a URL-safe base64 of ``"{created_at_rfc3339}|{id}"``.

    Parameters
    ----------
    created_at:
        UTC timestamp used as the first ordering component.
    id:
        Integer primary key used as the second ordering component.

    Returns
    -------
    str
        Encoded keyset token suitable for use as ``after_key``.
    """

    payload = f"{to_rfc3339_z(created_at)}|{id}"
    return base64.urlsafe_b64encode(payload.encode("utf-8")).decode("ascii")


def decode_after_key(token: str) -> Keyset:
    """Decode a keyset token into its components.

    Parameters
    ----------
    token:
        A token previously generated by :func:`encode_after_key`.

    Returns
    -------
    Keyset
        The decoded components.
    """

    try:
        raw = base64.urlsafe_b64decode(token.encode("ascii")).decode("utf-8")
        ts_str, id_str = raw.split("|", 1)
        created_at = parse_utc(ts_str)
        if created_at is None:  # pragma: no cover - defensive
            raise ValueError("Invalid timestamp in token")
        return Keyset(created_at=created_at, id=int(id_str))
    except Exception as exc:  # pragma: no cover - defensive
        raise ValueError("Invalid after_key token") from exc
